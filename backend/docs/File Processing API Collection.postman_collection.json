{
  "info": {
    "_postman_id": "3f8c2dde-60be-4425-a470-74003d4dc7c4",
    "name": "File Processing API Collection",
    "description": "Complete collection for File Processing API with File Upload, Reconciliation, File Generation, Regex, and Viewer routes",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "46038962",
    "_collection_link": "https://biswambarpradhan-3159942.postman.co/workspace/Biswambar-Pradhan's-Workspace~44edaa11-edca-48db-83c4-e65e895f667a/collection/46038962-3f8c2dde-60be-4425-a470-74003d4dc7c4?action=share&source=collection_link&creator=46038962"
  },
  "item": [
    {
      "name": "Health & Config",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Config",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/config",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "config"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reconciliation Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/reconciliation/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "reconciliation",
                "health"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "File Management",
      "item": [
        {
          "name": "List All Files",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/files/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "files",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get File Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/files/{{file_id}}?include_sample=true&sample_rows=5",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "files",
                "{{file_id}}"
              ],
              "query": [
                {
                  "key": "include_sample",
                  "value": "true"
                },
                {
                  "key": "sample_rows",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Preview File Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/files/{{file_id}}/preview?start_row=0&num_rows=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "files",
                "{{file_id}}",
                "preview"
              ],
              "query": [
                {
                  "key": "start_row",
                  "value": "0"
                },
                {
                  "key": "num_rows",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete File",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/files/{{file_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "files",
                "{{file_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Upload File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.to.have.status(200)) {",
                  "                      var jsonData = pm.response.json();",
                  "                      if (jsonData.success && jsonData.data && jsonData.data.file_id) {",
                  "                          pm.collectionVariables.set('file_id', jsonData.data.file_id);",
                  "                          console.log('File ID saved:', jsonData.data.file_id);",
                  "                      }",
                  "                  }"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "postman-cloud:///1f058944-c095-4710-a0c5-dcfcb4d6d9cd"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/files/upload",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "files",
                "upload"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "File Viewer",
      "item": [
        {
          "name": "Get File Data (Paginated)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/files/{{file_id}}/data?page=1&page_size=100",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "files",
                "{{file_id}}",
                "data"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "page_size",
                  "value": "100"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get File Info for Viewer",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/files/{{file_id}}/info",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "files",
                "{{file_id}}",
                "info"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update File Data",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"columns\": [\"Name\", \"Age\", \"City\"],\n    \"rows\": [\n      {\"Name\": \"John Doe\", \"Age\": 30, \"City\": \"New York\"},\n      {\"Name\": \"Jane Smith\", \"Age\": 25, \"City\": \"Los Angeles\"},\n      {\"Name\": \"Bob Johnson\", \"Age\": 35, \"City\": \"Chicago\"}\n    ]\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/files/{{file_id}}/data",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "files",
                "{{file_id}}",
                "data"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Download Modified File (CSV)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/files/{{file_id}}/download?format=csv",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "files",
                "{{file_id}}",
                "download"
              ],
              "query": [
                {
                  "key": "format",
                  "value": "csv"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Download Modified File (Excel)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/files/{{file_id}}/download?format=xlsx",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "files",
                "{{file_id}}",
                "download"
              ],
              "query": [
                {
                  "key": "format",
                  "value": "xlsx"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get File Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/files/{{file_id}}/stats",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "files",
                "{{file_id}}",
                "stats"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Validate File Data",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/files/{{file_id}}/validate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "files",
                "{{file_id}}",
                "validate"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "File Generator",
      "item": [
        {
          "name": "Validate Prompt Parsing",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "source_file",
                  "description": "Source file for generation",
                  "type": "file",
                  "src": "postman-cloud:///1f058944-c095-4710-a0c5-dcfcb4d6d9cd"
                },
                {
                  "key": "user_prompt",
                  "value": "Generate 2 rows for each source row. First row should have original amount, second row should have half the amount.",
                  "type": "text"
                },
                {
                  "key": "sheet_name",
                  "value": "",
                  "type": "text",
                  "disabled": true
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/file-generator/validate-prompt",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "file-generator",
                "validate-prompt"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate File from Rules",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.to.have.status(200)) {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.success && jsonData.generation_id) {",
                  "        pm.collectionVariables.set('generation_id', jsonData.generation_id);",
                  "        console.log('Generation ID saved:', jsonData.generation_id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "source_file",
                  "value": "",
                  "description": "Source file for generation",
                  "type": "file"
                },
                {
                  "key": "user_prompt",
                  "value": "Create 2 rows for each source row. First row with original amount, second row with amount set to 0. Include all original columns plus a new Status column that says 'Original' for first row and 'Adjustment' for second row.",
                  "type": "text"
                },
                {
                  "key": "sheet_name",
                  "value": "",
                  "type": "text",
                  "disabled": true
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/file-generator/generate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "file-generator",
                "generate"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Generation Results",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/file-generator/results/{{generation_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "file-generator",
                "results",
                "{{generation_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Preview Generated File",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/file-generator/preview/{{generation_id}}?limit=5",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "file-generator",
                "preview",
                "{{generation_id}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Download Generated File (CSV)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/file-generator/download/{{generation_id}}?format=csv",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "file-generator",
                "download",
                "{{generation_id}}"
              ],
              "query": [
                {
                  "key": "format",
                  "value": "csv"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Download Generated File (Excel)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/file-generator/download/{{generation_id}}?format=excel",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "file-generator",
                "download",
                "{{generation_id}}"
              ],
              "query": [
                {
                  "key": "format",
                  "value": "excel"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "List All Generations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/file-generator/list-generations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "file-generator",
                "list-generations"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Generation Results",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/file-generator/results/{{generation_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "file-generator",
                "results",
                "{{generation_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Reconciliation",
      "item": [
        {
          "name": "Process Reconciliation (File Upload)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.to.have.status(200)) {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.success && jsonData.reconciliation_id) {",
                  "        pm.collectionVariables.set('reconciliation_id', jsonData.reconciliation_id);",
                  "        console.log('Reconciliation ID saved:', jsonData.reconciliation_id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "fileA",
                  "value": "",
                  "description": "First file for reconciliation",
                  "type": "file"
                },
                {
                  "key": "fileB",
                  "value": "",
                  "description": "Second file for reconciliation",
                  "type": "file"
                },
                {
                  "key": "rules",
                  "value": "{\n  \"Files\": [\n    {\n      \"Name\": \"FileA\",\n      \"KeyColumns\": [\"ID\"],\n      \"Filter\": [\n        {\n          \"Column\": \"Status\",\n          \"Operator\": \"equals\",\n          \"Value\": \"Active\"\n        }\n      ]\n    },\n    {\n      \"Name\": \"FileB\",\n      \"KeyColumns\": [\"ID\"],\n      \"Filter\": [\n        {\n          \"Column\": \"Status\",\n          \"Operator\": \"equals\",\n          \"Value\": \"Active\"\n        }\n      ]\n    }\n  ],\n  \"ReconciliationRules\": [\n    {\n      \"LeftFileColumn\": \"ID\",\n      \"RightFileColumn\": \"ID\",\n      \"MatchType\": \"exact\",\n      \"IsCaseSensitive\": false\n    },\n    {\n      \"LeftFileColumn\": \"Amount\",\n      \"RightFileColumn\": \"Amount\",\n      \"MatchType\": \"exact\",\n      \"IsCaseSensitive\": false\n    }\n  ]\n}",
                  "type": "text"
                },
                {
                  "key": "selected_columns_file_a",
                  "value": "[\"ID\", \"Name\", \"Amount\", \"Status\"]",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "selected_columns_file_b",
                  "value": "[\"ID\", \"Name\", \"Amount\", \"Status\"]",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "output_format",
                  "value": "standard",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/reconciliation/process/postman",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "reconciliation",
                "process",
                "postman"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Process Reconciliation (JSON)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.to.have.status(200)) {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.success && jsonData.reconciliation_id) {",
                  "        pm.collectionVariables.set('reconciliation_id', jsonData.reconciliation_id);",
                  "        console.log('Reconciliation ID saved:', jsonData.reconciliation_id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"process_type\": \"ai-reconciliation\",\n  \"process_name\": \"Financial Data Reconciliation\",\n  \"user_requirements\": \"Compare financial transactions between two systems\",\n  \"files\": [\n    {\n      \"file_id\": \"{{file_id}}\",\n      \"role\": \"file_0\",\n      \"label\": \"Source System Data\"\n    },\n    {\n      \"file_id\": \"{{file_id}}\",\n      \"role\": \"file_1\",\n      \"label\": \"Target System Data\"\n    }\n  ],\n  \"reconciliation_config\": {\n    \"Files\": [\n      {\n        \"Name\": \"FileA\",\n        \"KeyColumns\": [\"TransactionID\"],\n        \"Filter\": [\n          {\n            \"Column\": \"Status\",\n            \"Operator\": \"equals\",\n            \"Value\": \"Active\"\n          }\n        ]\n      },\n      {\n        \"Name\": \"FileB\",\n        \"KeyColumns\": [\"TransactionID\"],\n        \"Filter\": [\n          {\n            \"Column\": \"Status\",\n            \"Operator\": \"equals\",\n            \"Value\": \"Active\"\n          }\n        ]\n      }\n    ],\n    \"ReconciliationRules\": [\n      {\n        \"LeftFileColumn\": \"TransactionID\",\n        \"RightFileColumn\": \"TransactionID\",\n        \"MatchType\": \"exact\",\n        \"IsCaseSensitive\": false\n      },\n      {\n        \"LeftFileColumn\": \"Amount\",\n        \"RightFileColumn\": \"Amount\",\n        \"MatchType\": \"exact\",\n        \"IsCaseSensitive\": false\n      }\n    ],\n    \"selected_columns_file_a\": [\"TransactionID\", \"Amount\", \"Date\", \"Status\"],\n    \"selected_columns_file_b\": [\"TransactionID\", \"Amount\", \"Date\", \"Status\"],\n    \"user_requirements\": \"Match transactions by ID and amount\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/reconciliation/process/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "reconciliation",
                "process",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Reconciliation Results",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/reconciliation/results/{{reconciliation_id}}?result_type=all&page=1&page_size=100",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "reconciliation",
                "results",
                "{{reconciliation_id}}"
              ],
              "query": [
                {
                  "key": "result_type",
                  "value": "all",
                  "description": "all, matched, unmatched_a, unmatched_b"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "page_size",
                  "value": "100"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Matched Records Only",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/reconciliation/results/{{reconciliation_id}}?result_type=matched&page=1&page_size=50",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "reconciliation",
                "results",
                "{{reconciliation_id}}"
              ],
              "query": [
                {
                  "key": "result_type",
                  "value": "matched"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "page_size",
                  "value": "50"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Reconciliation Summary",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/reconciliation/results/{{reconciliation_id}}/summary",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "reconciliation",
                "results",
                "{{reconciliation_id}}",
                "summary"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Download Reconciliation Results (Excel)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/reconciliation/download/{{reconciliation_id}}?format=excel&result_type=all&compress=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "reconciliation",
                "download",
                "{{reconciliation_id}}"
              ],
              "query": [
                {
                  "key": "format",
                  "value": "excel"
                },
                {
                  "key": "result_type",
                  "value": "all"
                },
                {
                  "key": "compress",
                  "value": "true"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Download Reconciliation Results (CSV)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/reconciliation/download/{{reconciliation_id}}?format=csv&result_type=matched",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "reconciliation",
                "download",
                "{{reconciliation_id}}"
              ],
              "query": [
                {
                  "key": "format",
                  "value": "csv"
                },
                {
                  "key": "result_type",
                  "value": "matched"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Reconciliation Results",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/reconciliation/results/{{reconciliation_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "reconciliation",
                "results",
                "{{reconciliation_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Regex Generator",
      "item": [
        {
          "name": "Generate Regex Pattern",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Extract dollar amounts from transaction descriptions. the dollar sysmbol may or may not be there\",\n  \"sample_text\": \"Payment of $1,234.56 processed successfully. Transaction fee: $2.50\",\n  \"column_name\": \"transaction_description\",\n  \"context\": {\n    \"data_type\": \"financial\",\n    \"expected_format\": \"currency\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/regex/generate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "regex",
                "generate"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Test Regex Pattern",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"regex\": \"\\\\$([\\\\d,]+(?:\\\\.\\\\d{2})?)\",\n  \"test_text\": \"Payment of $1,234.56 processed successfully. Transaction fee: $2.50. Refund amount: $100\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/regex/test",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "regex",
                "test"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Common Patterns",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/regex/patterns",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "regex",
                "patterns"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Pattern Suggestions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/regex/suggestions?description=extract email addresses",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "regex",
                "suggestions"
              ],
              "query": [
                {
                  "key": "description",
                  "value": "extract email addresses"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Email Pattern",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Extract email addresses from contact information\",\n  \"sample_text\": \"Contact us at support@company.com or sales@business.org for assistance\",\n  \"column_name\": \"contact_info\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/regex/generate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "regex",
                "generate"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Phone Pattern",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Extract phone numbers from customer data\",\n  \"sample_text\": \"Call us at (555) 123-4567 or 555.987.6543 for support\",\n  \"column_name\": \"phone_numbers\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/regex/generate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "regex",
                "generate"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Date Pattern",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Extract dates in MM/DD/YYYY format\",\n  \"sample_text\": \"Transaction date: 12/31/2023, Due date: 01/15/2024\",\n  \"column_name\": \"transaction_dates\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/regex/generate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "regex",
                "generate"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Sample Test Data",
      "item": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.collectionVariables.get('base_url')) {",
          "    pm.collectionVariables.set('base_url', 'http://localhost:8000');",
          "}"
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Global test script for all requests",
          "pm.test('Response time is less than 10 seconds', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(10000);",
          "});",
          "",
          "// Log response for debugging",
          "if (pm.response.code >= 400) {",
          "    console.log('Error Response:', pm.response.text());",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "file_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "generation_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "reconciliation_id",
      "value": "",
      "type": "string"
    }
  ]
}